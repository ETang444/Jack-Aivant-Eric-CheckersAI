//This is the class that we store all the board's data in.
//It should contain the 2D array for the board
//It should contain the makeMove method
//And it should contain a running count of each side's pieces
//Add more things here!


package checkers;

public class CheckerOp {

	// 0 - Blank Space
	// 1 - Red Piece
	// 2 - Black Piece
	// 3 - Red King
	// 4 - Black King
	// 5 - Rogue Piece

	private int[][] board = new int[8][8];
	
	public void resetBoard(){
		board = new int[][] 
			{{0, 1, 0, 1, 0, 1, 0, 1},   
		         {1, 0, 1, 0, 1, 0, 1, 0},
		         {0, 1, 0, 1, 0, 1, 0, 1},
		         {0, 0, 0, 0, 0, 0, 0, 0},
		         {0, 0, 0, 0, 0, 0, 0, 0},
		         {2, 0, 2, 0, 2, 0, 2, 0},
		         {0, 2, 0, 2, 0, 2, 0, 2},
		         {2, 0, 2, 0, 2, 0, 2, 0}};
	}
	
	
	public boolean makeMove(Pair from, Pair to){
		int x1=from.getX();
		int y1=from.getY();
		int x2=to.getX();
		int y2=to.getY();
		
		int moveType; //stores whether it is a move, jump or invalid
		
		int pieceType = board[x1][y1]; //finds the type of piece at the from position
		
		if(pieceType == 0) return false; //if you are moving from a blank face, return false
		
		moveType = checkValidMove(from, to);
		
		if(moveType == 0) return false;
		
		//now move the piece accordingly. moveType is 1 if it is a normal move or 2 if it is a jump
		board[x2][y2] = board[x1][y1];
		board[x1][y1] = 0;
		
		if(moveType == 2){
			int x = (x2-x1)/2;
			int y = (y2-y1)/2;
			board[x1 + x][y1+y] = 0;
		}
		
		//Check to see if a King was born
		if(to.getY() == 0 || to.getY() == 7){
			if(pieceType == 1) board[to.getX()][to.getY()] = 3;
			if(pieceType == 2) board[to.getX()][to.getY()] = 4;
		}
		return true;
	}
	
	//MoveType
	//0 - Invalid Move
	//1 - Normal Move
	//2 - Jump
	
	private int checkValidMove(Pair from, Pair to) {
		int x1=from.getX();
		int y1=from.getY();
		int x2=to.getX();
		int y2=to.getY();
		int fromPieceType = board[x1][y1];
		if(fromPieceType == 3 ||fromPieceType == 4) return checkValidkingMove(from, to);
		int toPieceType = board[x2][y2];
		
		if(toPieceType != 0) return 0; //check to make sure you're trying to go to a blank space
		
		
		//make sure it is in a valid spot
		if(fromPieceType == 1 && Math.abs(x2-x1) == 1 && (y2-y1)==-1) return 1; 
                //don't we also have to check the case when it's a non-jumping piece of type 2?
                //similarly, in this next section, don't we have to check if it's a jumping piece of type 1?
		else if(fromPieceType == 2 && Math.abs(x2-x1) == 2 && (y2-y1) == 2){
			int x = (x2-x1)/2;
			int y = (y2-y1)/2;
			if(board[x2+x][y2+y] != 0) return 2;
			return 0;
		}
		else return 0;
	}
	
	private int checkValidkingMove(Pair from, Pair to) {
		int x1=from.getX();
		int y1=from.getY();
		int x2=to.getX();
		int y2=to.getY();
		int toPieceType = board[x2][y2];
		
		if(toPieceType != 0) return 0; //check to make sure you're trying to go to a blank space
		
		//make sure it is within range.
		if(Math.abs(x2-x1) == 1 && Math.abs(y2-y1) == 1) return 1;
		else if(Math.abs(x2-x1) == 2 && Math.abs(y2-y1) == 2) return 2;
		else return 0;

	}

	public int[][] getBoard(){
		return board;
	}

}
