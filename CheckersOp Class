package checkers;

public class CheckersOp {

	// 0 - Blank Space
	// 1 - Red Piece
	// 2 - Black Piece
	// 3 - Red King
	// 4 - Black King
	// 5 - Rogue Piece

	private int[][] board = new int[8][8];

	public void resetBoard(){
		board = new int[][] 
				//int[7][1] is seven rows down, one row right
				{{0, 1, 0, 1, 0, 1, 0, 1},   
				{1, 0, 1, 0, 1, 0, 1, 0},
				{0, 1, 0, 1, 0, 1, 0, 1},
				{0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0},
				{2, 0, 2, 0, 2, 0, 2, 0},
				{0, 2, 0, 2, 0, 2, 0, 2},
				{2, 0, 2, 0, 2, 0, 2, 0}};
	}
	int rCount=12;
	int bCount=12;
	int turnCount=0;
	int turn = 0;
	int currJumper = -1; //-1 to be default state
	//0 for black, 1 for red

	public int makeMove(int from, int to){
		int fromY = from / 10;
		int fromX = from % 10;
		int toY = to / 10;
		int toX = to % 10;


		int moveType; //stores whether it is a move, jump or invalid

		int pieceType = board[fromY][fromX]; //finds the type of piece at the from position




		if(pieceType == 0) return 0; //if you are moving from a blank face, return false

		if(pieceType %2 != turn) return 0;//it is not the person's turn 

		moveType = checkValidMove(from, to);
		System.out.println("Check Valid Move: " + moveType +  "from: " + from + " to: " + to);

		if(moveType == 0) return 0;

		//now move the piece accordingly. moveType is 1 if it is a normal move or 2 if it is a jump

		if(currJumper != -1){
			if(from != currJumper) return 0;
			if(moveType != 2) return 0;
			
		}
		board[toY][toX] = board[fromY][fromX];
		board[fromY][fromX] = 0;

		if(moveType == 2){

			int y = (toY - fromY)/2;
			int x = (toX - fromX)/2;
			int middle = board[fromY + y][fromX + x];
			if(pieceType == 2 || pieceType == 4){
				if(middle == 1 || middle == 3){
					board[fromY + y][fromX + x] = 0;
					rCount--;
				}else return 0;
			}

			if(pieceType == 1 || pieceType == 3){
				if(middle == 2 || middle == 4){
					board[fromY + y][fromX + x] = 0;
					bCount--;
				}else return 0;
			}

		}

		//Check to see if a King was born
		if(toY == 0 || toY == 7){
			if(pieceType == 1) board[toY][toX] = 3;
			if(pieceType == 2) board[toY][toX] = 4;
		}
		turnCount++;
		if(currJumper != -1) currJumper = -1;
		boolean testHasJump = hasJump(to);
		System.out.println(" Has Jump? : + " + testHasJump);
		if(moveType == 2 && testHasJump) currJumper = to;
		else switchTurn();


		return moveType;
	}

	public boolean isRedturn(){
		if(turn == 1) return true;
		return false;
	}
	private void switchTurn(){
		if(turn == 0) turn = 1;
		else turn = 0;
	}

	private boolean hasJump(int piece){
		int y=piece/10;
		int x=piece%10;
		int pieceType=board[y][x];
		if(pieceType==0)
			return false; 
		if(checkValidMove(piece, piece+22)!=0||
				checkValidMove(piece, piece+18)!=0||
				checkValidMove(piece, piece-22)!=0||
				checkValidMove(piece, piece-18)!=0)
			return true;
		return false;
	}
	/*
		if(pieceType==1){
			if(y<6&&x>1&&(board[y+1][x-1]==2||board[y+1][x-1]==4))
				if(board[y+2][x-2]==0)
					return true;
			if(y<6&&x<6&&(board[y+1][x+1]==2||board[y+1][x+1]==4))
				if(board[y+2][x+2]==0)	
					return true;
		}
		if(pieceType==2){
			if(y>1&&x>1&&(board[y-1][x-1]==1||board[y-1][x-1]==3))
				if(board[y-2][x-2]==0)
					return true;
			if(y>1&&x<6&&(board[y-1][x+1]==1||board[y-1][x+1]==3))
				if(board[y-2][x+2]==0)	
					return true;
		}
		if(pieceType==3){
			if(y<6&&x>1&&(board[y+1][x-1]==2||board[y+1][x-1]==4))
				if(board[y+2][x-2]==0)
					return true;
			if(y<6&&x<6&&(board[y+1][x+1]==2||board[y+1][x+1]==4))
				if(board[y+2][x+2]==0)	
					return true;
			if(y>1&&x>1&&(board[y-1][x-1]==2||board[y+1][x-1]==4))
				if(board[y-2][x-2]==0)
					return true;
			if(y>1&&x<6&&(board[y-1][x+1]==2||board[y+1][x+1]==4))
				if(board[y-2][x+2]==0)	
					return true;
		}
		if(pieceType==4){
			if(y<6&&x>1&&(board[y+1][x-1]==1||board[y+1][x-1]==3))
				if(board[y+2][x-2]==0)
					return true;
			if(y<6&&x<6&&(board[y+1][x+1]==1||board[y+1][x+1]==3))
				if(board[y+2][x+2]==0)	
					return true;
			if(y>1&&x>1&&(board[y-1][x-1]==1||board[y+1][x-1]==3))
				if(board[y-2][x-2]==0)
					return true;
			if(y>1&&x<6&&(board[y-1][x+1]==1||board[y+1][x+1]==3))
				if(board[y-2][x+2]==0)	
					return true;
		}
		return false;
	}	
	 */

	//MoveType
	//0 - Invalid Move
	//1 - Normal Move
	//2 - Jump

	private int checkValidMove(int from, int to) {
		int fromY = from / 10;
		int fromX = from % 10;
		int toY = to / 10;
		int toX = to % 10;
		if(fromY>7||fromY<0||toX>7||toX<0||fromX>7||fromX<0||toY>7||toY<0)
			return 0;
		int fromPieceType = board[fromY][fromX];
		if(fromPieceType == 3 ||fromPieceType == 4) 
			return checkValidkingMove(from, to);
		int toPieceType = board[toY][toX];

		if(toPieceType != 0) return 0; //check to make sure you're trying to go to a blank space


		//make sure it is in a valid spot
		if(fromPieceType == 1 && Math.abs(toX - fromX) == 1 && toY - fromY == 1) return 1;
		if(fromPieceType == 2 && Math.abs(toX - fromX) == 1 && toY - fromY == -1) return 1;
		if(fromPieceType == 2 && Math.abs(toX - fromX) == 2 && toY - fromY == -2){
			int x = (fromX - toX)/2;
			System.out.println(fromX +  " + " + x + " + " + fromY);
			if(board[fromY - 1][fromX  + x] != 0) return 2;
			return 0;
		}
		if(fromPieceType == 1 && Math.abs(toX - fromX) == 2 && toY - fromY == 2){
			int x = (toX - fromX)/2;
			if(board[fromY + 1][fromX  + x] != 0) return 2;
			return 0;
		}
		else return 0;
	}

	private int checkValidkingMove(int from, int to) {
		int fromY = from / 10;
		int fromX = from % 10;
		int toY = to / 10;
		int toX = to % 10;

		int fromPieceType = board[fromY][fromX];
		int toPieceType = board[toY][toX];

		if(toPieceType != 0) return 0; //check to make sure you're trying to go to a blank space

		//make sure it is within range.
		if(Math.abs(toY - fromY) == 1 && Math.abs(toX - fromX) == 1) return 1;
		else if(Math.abs(toY - fromY) == 2 && Math.abs(toX - fromX) == 2){
			int x = (fromX - toX)/2;
			int y = (fromY - toY)/2;
			if(fromPieceType == 3 && (board[fromY + y][fromX + x] == 2 || board[fromY + y][fromX + x] == 4)){
				return 2;
			}
			if(fromPieceType == 4 && (board[fromY + y][fromX + x] == 1 || board[fromY + y][fromX + x] == 3)){
				return 2;
			}
			return 0;
			
		}
		
		else return 0;

	}

	public int checkWinner(){
		//need a turn counter, mod it for whose turn. Call it turn, 0 is black, 1 red
		//0 no winner, 1 red winner, 2 black winner
		//Need to add into checkValidMove parameters to assure that the inputted
		//square is within the bounds. 
		if(rCount==0)
			return 2;
		if(bCount==0)
			return 1;
		for(int i=0;i<8;i++){
			for(int j=0;j<8;j++){
				if(board[i][j]==1){ 
					//red legal move?
					int piece=10*i+j;
					if(checkValidkingMove(piece,piece+11)==0)
						return 0;
					if(checkValidkingMove(piece,piece+9)==0)
						return 0;
					if(checkValidkingMove(piece,piece+22)==0)
						return 0;
					if(checkValidkingMove(piece,piece+18)==0)
						return 0;
				}
				if(board[i][j]==2){
					//black legal move?
					int piece=10*i+j;
					if(checkValidkingMove(piece,piece-11)==0)
						return 0;
					if(checkValidkingMove(piece,piece-9)==0)
						return 0;
					if(checkValidkingMove(piece,piece-22)==0)
						return 0;
					if(checkValidkingMove(piece,piece-18)==0)
						return 0;
				}
				if(board[i][j]==3){ 
					//red legal move?
					int piece=10*i+j;
					if(checkValidkingMove(piece,piece+11)==0)
						return 0;
					if(checkValidkingMove(piece,piece+9)==0)
						return 0;
					if(checkValidkingMove(piece,piece+22)==0)
						return 0;
					if(checkValidkingMove(piece,piece+18)==0)
						return 0;
					if(checkValidMove(piece,piece-11)==0)
						return 0;
					if(checkValidMove(piece,piece-9)==0)
						return 0;
					if(checkValidMove(piece,piece-22)==0)
						return 0;
					if(checkValidMove(piece,piece-18)==0)
						return 0;
				}
				if(board[i][j]==4){
					//black legal move?
					int piece=10*i+j;
					if(checkValidkingMove(piece,piece-11)==0)
						return 0;
					if(checkValidkingMove(piece,piece-9)==0)
						return 0;
					if(checkValidkingMove(piece,piece-22)==0)
						return 0;
					if(checkValidkingMove(piece,piece-18)==0)
						return 0;
					if(checkValidMove(piece,piece-11)==0)
						return 0;
					if(checkValidMove(piece,piece-9)==0)
						return 0;
					if(checkValidMove(piece,piece-22)==0)
						return 0;
					if(checkValidMove(piece,piece-18)==0)
						return 0;
				}

			}
		}

		return 0;
	}

	public int[][] getBoard(){
		return board;
	}

}
