//package checkers;

public class CheckersOp {

	// 0 - Blank Space
	// 1 - Red Piece
	// 2 - Black Piece
	// 3 - Red King
	// 4 - Black King
	// 5 - Rogue Piece

	private int[][] board = new int[8][8];
	
	public void resetBoard(){
		board = new int[][] 
				{{0, 1, 0, 1, 0, 1, 0, 1},   
		         {1, 0, 1, 0, 1, 0, 1, 0},
		         {0, 1, 0, 1, 0, 1, 0, 1},
		         {0, 0, 0, 0, 0, 0, 0, 0},
		         {0, 0, 0, 0, 0, 0, 0, 0},
		         {2, 0, 2, 0, 2, 0, 2, 0},
		         {0, 2, 0, 2, 0, 2, 0, 2},
		         {2, 0, 2, 0, 2, 0, 2, 0}};
	}
	int rCount=12;
	int bCount=12;
	int turnCount=0;
	
	public int makeMove(int from, int to){
		int fromX = from / 10;
		int fromY = from % 10;
		int toX = to / 10;
		int toY = to % 10;
		
		int moveType; //stores whether it is a move, jump or invalid
		
		int pieceType = board[fromX][fromY]; //finds the type of piece at the from position
		
		if(pieceType == 0) return 0; //if you are moving from a blank face, return false
		
		moveType = checkValidMove(from, to);
		
		if(moveType == 0) return 0;
		
		//now move the piece accordingly. moveType is 1 if it is a normal move or 2 if it is a jump
		board[toX][toY] = board[fromX][fromY];
		board[fromX][fromY] = 0;
		
		if(moveType == 2){
			
			int x = (toX - fromX)/2;
			int y = (toY - fromY)/2;
			int middle = board[fromX + x][fromY + y];
			if(pieceType == 2 || pieceType == 4){
					if(middle == 1 || middle == 3){
						board[fromX + x][fromY + y] = 0;
						rCount--;
					}else return 0;
			}
			
			if(pieceType == 1 || pieceType == 3){
				if(middle == 2 || middle == 4){
					board[fromX + x][fromY + y] = 0;
					bCount--;
				}else return 0;
			}
				
		}
		
		//Check to see if a King was born
		if(toX == 0 || toX == 7){
			if(pieceType == 1) board[toX][toY] = 3;
			if(pieceType == 2) board[toX][toY] = 4;
		}
		turnCount++;
		return moveType;
	}
	
	//MoveType
	//0 - Invalid Move
	//1 - Normal Move
	//2 - Jump
	
	private int checkValidMove(int from, int to) {
		int fromX = from / 10;
		int fromY = from % 10;
		int toX = to / 10;
		int toY = to % 10;
		
		int fromPieceType = board[fromX][fromY];
		if(fromPieceType == 3 ||fromPieceType == 4) return checkValidkingMove(from, to);
		int toPieceType = board[toX][toY];
		
		if(toPieceType != 0) return 0; //check to make sure you're trying to go to a blank space
		
		
		//make sure it is in a valid spot
		if(fromPieceType == 1 && Math.abs(toX - fromX) == 1 && toY - fromY == -1) return 1;
		if(fromPieceType == 2 && Math.abs(toX - fromX) == 1 && toY - fromY == 1) return 1;
		if(fromPieceType == 2 && Math.abs(toX - fromX) == 2 && toY - fromY == 2){
			int x = (toX - fromX)/2;
			int y = (toY - fromY)/2;
			if(board[fromX + x][fromY + y] != 0) return 2;
			return 0;
		}
		if(fromPieceType == 1 && Math.abs(toX - fromX) == 2 && toY - fromY == -2){
			int x = (toX - fromX)/2;
			int y = (toY - fromY)/2;
			if(board[fromX + x][fromY + y] != 0) return 2;
			return 0;
		}
		else return 0;
	}
	
	private int checkValidkingMove(int from, int to) {
		int fromX = from / 10;
		int fromY = from % 10;
		int toX = to / 10;
		int toY = to % 10;
		
		int toPieceType = board[toX][toY];
		
		if(toPieceType != 0) return 0; //check to make sure you're trying to go to a blank space
		
		//make sure it is within range.
		if(Math.abs(toX - fromX) == 1 && Math.abs(toY - fromY) == 1) return 1;
		else if(Math.abs(toX - fromY) == 2 && Math.abs(toY - fromY) == 2) return 2;
		else return 0;

	}

	public int checkWinner(){
		//need a turn counter, mod it for whose turn. Call it turn, 0 is black, 1 red
		//0 no winner, 1 red winner, 2 black winner
		//Needd to add into checkValidMove parameters to assure that the inputted
		//square is within the bounds. 
		if(rCount==0)
			return 2;
		if(bCount==0)
			return 1;
		for(int i=0;i<8;i++){
			for(int j=0;j<8;j++){
				if(board[i][j]==1){ 
					//red legal move?
					int piece=10*i+j;
					if(checkValidMove(piece,piece+11)==0)
						return 0;
					if(checkValidMove(piece,piece+9)==0)
						return 0;
					if(checkValidMove(piece,piece+22)==0)
						return 0;
					if(checkValidMove(piece,piece+18)==0)
						return 0;
				}
				if(board[i][j]==2){
					//black legal move?
					int piece=10*i+j;
					if(checkValidMove(piece,piece-11)==0)
						return 0;
					if(checkValidMove(piece,piece-9)==0)
						return 0;
					if(checkValidMove(piece,piece-22)==0)
						return 0;
					if(checkValidMove(piece,piece-18)==0)
						return 0;
				}
				if(board[i][j]==3){ 
					//red legal move?
					int piece=10*i+j;
					if(checkValidkingMove(piece,piece+11)==0)
						return 0;
					if(checkValidkingMove(piece,piece+9)==0)
						return 0;
					if(checkValidkingMove(piece,piece+22)==0)
						return 0;
					if(checkValidkingMove(piece,piece+18)==0)
						return 0;
					if(checkValidMove(piece,piece-11)==0)
						return 0;
					if(checkValidMove(piece,piece-9)==0)
						return 0;
					if(checkValidMove(piece,piece-22)==0)
						return 0;
					if(checkValidMove(piece,piece-18)==0)
						return 0;
				}
				if(board[i][j]==4){
					//black legal move?
					int piece=10*i+j;
					if(checkValidkingMove(piece,piece-11)==0)
						return 0;
					if(checkValidkingMove(piece,piece-9)==0)
						return 0;
					if(checkValidkingMove(piece,piece-22)==0)
						return 0;
					if(checkValidkingMove(piece,piece-18)==0)
						return 0;
					if(checkValidMove(piece,piece-11)==0)
						return 0;
					if(checkValidMove(piece,piece-9)==0)
						return 0;
					if(checkValidMove(piece,piece-22)==0)
						return 0;
					if(checkValidMove(piece,piece-18)==0)
						return 0;
				}
				
			}
		}
		
		return 0;
	}
	
	public int[][] getBoard(){
		return board;
	}

}
